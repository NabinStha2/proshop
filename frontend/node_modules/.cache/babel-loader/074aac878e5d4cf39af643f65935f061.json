{"ast":null,"code":"import { USER_LOGIN_FAILED, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAILED, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS } from \"../constants/userConstant\";\nimport axios from \"axios\";\nexport const login = (email, password) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const {\n      data\n    } = await axios.post(\"/api/users/login\", {\n      email,\n      password\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(getState().userLogin.userInfo));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAILED,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  dispatch({\n    type: USER_LOGOUT\n  });\n  localStorage.removeItem(\"userInfo\");\n};\nexport const register = (name, email, password) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const {\n      data\n    } = await axios.post(\"/api/users/register\", {\n      name,\n      email,\n      password\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(getState().userRegister.userInfo));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAILED,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/nabin/Documents/React/ProShop/frontend/src/actions/userActions.js"],"names":["USER_LOGIN_FAILED","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAILED","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","axios","login","email","password","dispatch","getState","type","data","post","headers","payload","localStorage","setItem","JSON","stringify","userLogin","userInfo","error","response","message","logout","removeItem","register","name","userRegister"],"mappings":"AAAA,SACEA,iBADF,EAEEC,kBAFF,EAGEC,kBAHF,EAIEC,WAJF,EAKEC,oBALF,EAMEC,qBANF,EAOEC,qBAPF,QAQO,2BARP;AASA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACtE,MAAI;AACFD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEZ;AADC,KAAD,CAAR;AAIA,UAAM;AAAEa,MAAAA;AAAF,QAAW,MAAMP,KAAK,CAACQ,IAAN,CACrB,kBADqB,EAErB;AAAEN,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAFqB,EAGrB;AACEM,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADX,KAHqB,CAAvB;AASAL,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEX,kBADC;AAEPe,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAIAI,IAAAA,YAAY,CAACC,OAAb,CACE,UADF,EAEEC,IAAI,CAACC,SAAL,CAAeT,QAAQ,GAAGU,SAAX,CAAqBC,QAApC,CAFF;AAID,GAtBD,CAsBE,OAAOC,KAAP,EAAc;AACdb,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEb,iBADC;AAEPiB,MAAAA,OAAO,EACLO,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeX,IAAf,CAAoBY,OAAtC,GACIF,KAAK,CAACC,QAAN,CAAeX,IAAf,CAAoBY,OADxB,GAEIF,KAAK,CAACE;AALL,KAAD,CAAR;AAOD;AACF,CAhCM;AAkCP,OAAO,MAAMC,MAAM,GAAG,MAAM,MAAOhB,QAAP,IAAoB;AAC9CA,EAAAA,QAAQ,CAAC;AACPE,IAAAA,IAAI,EAAEV;AADC,GAAD,CAAR;AAGAe,EAAAA,YAAY,CAACU,UAAb,CAAwB,UAAxB;AACD,CALM;AAOP,OAAO,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOrB,KAAP,EAAcC,QAAd,KAA2B,OACjDC,QADiD,EAEjDC,QAFiD,KAG9C;AACH,MAAI;AACFD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAER;AADC,KAAD,CAAR;AAIA,UAAM;AAAES,MAAAA;AAAF,QAAW,MAAMP,KAAK,CAACQ,IAAN,CACrB,qBADqB,EAErB;AAAEe,MAAAA,IAAF;AAAQrB,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAFqB,EAGrB;AACEM,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADX,KAHqB,CAAvB;AAUAL,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEP,qBADC;AAEPW,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAIAH,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEX,kBADC;AAEPe,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAKAI,IAAAA,YAAY,CAACC,OAAb,CACE,UADF,EAEEC,IAAI,CAACC,SAAL,CAAeT,QAAQ,GAAGmB,YAAX,CAAwBR,QAAvC,CAFF;AAID,GA5BD,CA4BE,OAAOC,KAAP,EAAc;AACdb,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAET,oBADC;AAEPa,MAAAA,OAAO,EACLO,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeX,IAAf,CAAoBY,OAAtC,GACIF,KAAK,CAACC,QAAN,CAAeX,IAAf,CAAoBY,OADxB,GAEIF,KAAK,CAACE;AALL,KAAD,CAAR;AAOD;AACF,CAzCM","sourcesContent":["import {\n  USER_LOGIN_FAILED,\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGOUT,\n  USER_REGISTER_FAILED,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n} from \"../constants/userConstant\";\nimport axios from \"axios\";\n\nexport const login = (email, password) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n    });\n\n    const { data } = await axios.post(\n      \"/api/users/login\",\n      { email, password },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n    localStorage.setItem(\n      \"userInfo\",\n      JSON.stringify(getState().userLogin.userInfo)\n    );\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAILED,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const logout = () => async (dispatch) => {\n  dispatch({\n    type: USER_LOGOUT,\n  });\n  localStorage.removeItem(\"userInfo\");\n};\n\nexport const register = (name, email, password) => async (\n  dispatch,\n  getState\n) => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST,\n    });\n\n    const { data } = await axios.post(\n      \"/api/users/register\",\n      { name, email, password },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data,\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n\n    localStorage.setItem(\n      \"userInfo\",\n      JSON.stringify(getState().userRegister.userInfo)\n    );\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAILED,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}